(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{223:function(t,a,v){"use strict";v.r(a);var r=v(0),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),v("h3",{attrs:{id:"时间复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),v("p",[t._v("一个算法的时间复杂度反映了程序运行从开始到结束所需要的时间。把算法中基本操作重复执行的次数（频度）作为算法的时间复杂度。")]),t._v(" "),v("p",[t._v("没有循环语句，记作"),v("code",[t._v("O(1)")]),t._v("，也称为常数阶。只有一重循环，则算法的基本操作的执行频度与问题规模n呈线性增大关系，记作"),v("code",[t._v("O（n）")]),t._v("，也叫线性阶。")]),t._v(" "),v("p",[t._v("常见的时间复杂度有：")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("O(1)")]),t._v(": Constant Complexity: Constant 常数复杂度")]),t._v(" "),v("li",[v("code",[t._v("O(log n)")]),t._v(": Logarithmic Complexity: 对数复杂度")]),t._v(" "),v("li",[v("code",[t._v("O(n)")]),t._v(": Linear Complexity: 线性时间复杂度")]),t._v(" "),v("li",[v("code",[t._v("O(n^2)")]),t._v(": N square Complexity 平⽅方")]),t._v(" "),v("li",[v("code",[t._v("O(n^3)")]),t._v(": N square Complexity ⽴立⽅方")]),t._v(" "),v("li",[v("code",[t._v("O(2^n)")]),t._v(": Exponential Growth 指数")]),t._v(" "),v("li",[v("code",[t._v("O(n!)")]),t._v(": Factorial 阶乘")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://i.loli.net/2019/08/19/RS4xlctUEQjbkw6.png",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"空间复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 空间复杂度")]),t._v(" "),v("p",[t._v("一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。")]),t._v(" "),v("p",[t._v("一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。")]),t._v(" "),v("h3",{attrs:{id:"排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),v("ul",[v("li",[v("router-link",{attrs:{to:"/advance/算法/排序/排序.html"}},[t._v("排序-概览")])],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/排序/冒泡排序.html"}},[t._v("冒泡排序")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/排序/插入排序.html"}},[t._v("插入排序")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/排序/选择排序.html"}},[t._v("选择排序")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/排序/堆排序.html"}},[t._v("堆排序")]),t._v("⭐⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/排序/快速排序.html"}},[t._v("快速排序")]),t._v("⭐⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/排序/归并排序.html"}},[t._v("归并排序")]),t._v("⭐⭐⭐")],1)]),t._v(" "),v("h3",{attrs:{id:"分治"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分治","aria-hidden":"true"}},[t._v("#")]),t._v(" 分治")]),t._v(" "),v("ul",[v("li",[v("router-link",{attrs:{to:"/advance/算法/分治/数组中的逆序对.html"}},[t._v("数组中的逆序对")]),t._v("⭐⭐⭐")],1)]),t._v(" "),v("h3",{attrs:{id:"数学运算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数学运算","aria-hidden":"true"}},[t._v("#")]),t._v(" 数学运算")]),t._v(" "),v("ul",[v("li",[v("router-link",{attrs:{to:"/advance/算法/数学运算/二进制中1的个数.html"}},[t._v("二进制中1的个数")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/数学运算/数值的整数次方.html"}},[t._v("数值的整数次方")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/数学运算/数组中只出现一次的数字.html"}},[t._v("数组中只出现一次的数字")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/数学运算/不用加减乘除做加法.html"}},[t._v("不用加减乘除做加法")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/数学运算/字符串转换成整数.html"}},[t._v("字符串转换成整数")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/数学运算/整数中1出现的次数.html"}},[t._v("整数中1出现的次数")]),t._v("⭐⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/数学运算/1+2+3+...+n.html"}},[t._v("1+2+3+...+n")]),t._v("⭐⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/数学运算/丑数.html"}},[t._v("丑数")]),t._v("⭐⭐⭐")],1)]),t._v(" "),v("h3",{attrs:{id:"查找"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查找","aria-hidden":"true"}},[t._v("#")]),t._v(" 查找")]),t._v(" "),v("ul",[v("li",[v("router-link",{attrs:{to:"/advance/算法/查找/查找.html"}},[t._v("查找-概览")])],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/查找/二维数组查找.html"}},[t._v("二维数组查找")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/查找/在排序数组中查找数字.html"}},[t._v("在排序数组中查找数字")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/查找/整数中1出现的次数.html"}},[t._v("整数中1出现的次数")]),t._v("⭐⭐")],1)]),t._v(" "),v("h3",{attrs:{id:"dfs和bfs"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dfs和bfs","aria-hidden":"true"}},[t._v("#")]),t._v(" DFS和BFS")]),t._v(" "),v("ul",[v("li",[v("router-link",{attrs:{to:"/advance/算法/DFS和BFS/DFS和BFS.html"}},[t._v("DFS和BFS-概览")])],1)]),t._v(" "),v("h3",{attrs:{id:"递归和循环"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#递归和循环","aria-hidden":"true"}},[t._v("#")]),t._v(" 递归和循环")]),t._v(" "),v("ul",[v("li",[v("router-link",{attrs:{to:"/advance/算法/递归和循环/递归.html"}},[t._v("递归-概览")])],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/递归和循环/斐波拉契数列.html"}},[t._v("斐波拉契数列")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/递归和循环/跳台阶.html"}},[t._v("跳台阶")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/递归和循环/变态跳台阶.html"}},[t._v("变态跳台阶")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/递归和循环/矩形覆盖.html"}},[t._v("矩形覆盖")]),t._v("⭐⭐")],1)]),t._v(" "),v("h3",{attrs:{id:"回溯算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 回溯算法")]),t._v(" "),v("ul",[v("li",[v("router-link",{attrs:{to:"/advance/算法/回溯算法/回溯算法.html"}},[t._v("回溯-概览")])],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/回溯算法/二叉树中和为某一值的路径.html"}},[t._v("二叉树中和为某一值的路径")]),t._v("⭐⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/回溯算法/字符串的排列.html"}},[t._v("字符串的排列")]),t._v("⭐⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/回溯算法/和为sum的n个数.html"}},[t._v("和为sum的n个数")]),t._v("⭐⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/回溯算法/矩阵中的路径.html"}},[t._v("矩阵中的路径")]),t._v("⭐⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/回溯算法/机器人的运动范围.html"}},[t._v("机器人的运动范围")]),t._v("⭐⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/回溯算法/N皇后问题.html"}},[t._v("N皇后问题")]),t._v("⭐⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/回溯算法/N皇后问题2.html"}},[t._v("N皇后问题2")]),t._v("⭐⭐⭐")],1)]),t._v(" "),v("h3",{attrs:{id:"动态规划"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#动态规划","aria-hidden":"true"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),v("ul",[v("li",[v("router-link",{attrs:{to:"/advance/算法/动态规划/动态规划.html"}},[t._v("动态规划-概览")])],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/递归和循环/斐波拉契数列.html"}},[t._v("斐波拉契数列")]),t._v("⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/动态规划/最小路径和.html"}},[t._v("最小路径和")]),t._v("⭐⭐⭐")],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/动态规划/打家劫舍.html"}},[t._v("打家劫舍")]),t._v("⭐⭐⭐")],1)]),t._v(" "),v("h3",{attrs:{id:"贪心算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 贪心算法")]),t._v(" "),v("ul",[v("li",[v("router-link",{attrs:{to:"/advance/算法/贪心算法/贪心算法.html"}},[t._v("贪心算法-概览")])],1),t._v(" "),v("li",[v("router-link",{attrs:{to:"/advance/算法/贪心算法/分发饼干.html"}},[t._v("分发饼干")]),t._v("⭐⭐")],1)])])}),[],!1,null,null,null);a.default=_.exports}}]);